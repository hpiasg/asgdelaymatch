package de.uni_potsdam.hpi.asg.delaymatch.setup.sdf;

/*
 * Copyright (C) 2017 Norman Kluge
 * 
 * This file is part of ASGdelaymatch.
 * 
 * ASGdelaymatch is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ASGdelaymatch is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with ASGdelaymatch.  If not, see <http://www.gnu.org/licenses/>.
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import de.uni_potsdam.hpi.asg.common.iohelper.BasedirHelper;
import de.uni_potsdam.hpi.asg.common.iohelper.FileHelper;
import de.uni_potsdam.hpi.asg.common.iohelper.WorkingdirGenerator;
import de.uni_potsdam.hpi.asg.common.technology.Technology;
import de.uni_potsdam.hpi.asg.delaymatch.helper.AbstractScriptGenerator;
import de.uni_potsdam.hpi.asg.delaymatch.model.DelayMatchModule;
import de.uni_potsdam.hpi.asg.delaymatch.model.DelayMatchModuleInst;

public class SplitSdfScriptGenerator extends AbstractScriptGenerator {
    private static final Logger              logger              = LogManager.getLogger();

    private static final String              in_sdf_file         = "_split_in.sdf";
    private static final String              in_v_file           = "_split_in.v";

    // generated by SimFlow
    private static final String              dc_sh_file          = "_split.sh";
    private static final String              dc_tcl_file         = "_split.tcl";

    // generated by scripts of SimFlow
    private static final String              dc_log_file         = "_split.log";

    // template files
    private static final File                dc_sh_templatefile  = BasedirHelper.getFileInBasedir("templates/delay_split.sh");
    private static final File                dc_tcl_templatefile = BasedirHelper.getFileInBasedir("templates/delay_split.tcl");

    private static Map<String, List<String>> templates;

    private int                              turnid;
    private String                           name;
    private String                           root;
    private String                           localfolder;
    private Technology                       tech;

    private Map<String, DelayMatchModule>    modules;

    public static SplitSdfScriptGenerator create(String name, String root, File sdffile, File vfile, Map<String, DelayMatchModule> modules, Technology tech) {
        if(templates == null) {
            //@formatter:off
            templates = readTemplateCodeSnippets(dc_tcl_templatefile, new String[]{
                "setup", "split", "final"
            });
            //@formatter:on
            if(templates == null) {
                return null;
            }
        }

        int turnid = 0;

        if(!FileHelper.getInstance().copyfile(sdffile, turnid + "_" + name + in_sdf_file)) {
            return null;
        }

        if(!FileHelper.getInstance().copyfile(vfile, turnid + "_" + name + in_v_file)) {
            return null;
        }

        return new SplitSdfScriptGenerator(turnid, name, root, modules, tech);
    }

    private SplitSdfScriptGenerator(int turnid, String name, String root, Map<String, DelayMatchModule> modules, Technology tech) {
        this.turnid = turnid;
        this.modules = modules;
        this.tech = tech;
        this.name = name;
        this.root = root;
        localfolder = WorkingdirGenerator.getInstance().getWorkingdir();
    }

    public boolean generate() {
        String rmdcshfile = turnid + "_" + name + dc_sh_file;
        String dcshfile = localfolder + rmdcshfile;
        FileHelper.getInstance().copyfile(dc_sh_templatefile, new File(dcshfile));
        replaceInSh(localfolder + turnid + "_" + name + dc_sh_file);

        String dctclfile = localfolder + turnid + "_" + name + dc_tcl_file;
        List<String> tclfilecontent = new ArrayList<>();
        tclfilecontent.addAll(generateSetupTcl());

        for(DelayMatchModule mod : modules.values()) {
            if(mod.getInstances().isEmpty()) {
                continue;
            }
            DelayMatchModuleInst inst = mod.getInstances().get(0);
            String sdffilename = turnid + "_" + name + "_" + inst.getInstName() + ".sdf";
            mod.setSdfFileName(sdffilename);
            tclfilecontent.addAll(generateSplitTcl(inst.getInstName(), sdffilename));
        }

        tclfilecontent.addAll(generateFinalTcl());
        if(!FileHelper.getInstance().writeFile(new File(dctclfile), tclfilecontent)) {
            return false;
        }

        return true;
    }

    private void replaceInSh(String filename) {
        try {
            File f = new File(filename);
            List<String> out = new ArrayList<String>();
            BufferedReader reader = new BufferedReader(new FileReader(f));
            String line = null;
            while((line = reader.readLine()) != null) {
                line = line.replace("#*dc_tcl*#", turnid + "_" + name + dc_tcl_file);
                out.add(line);
            }
            reader.close();
            FileHelper.getInstance().writeFile(new File(filename), out);
        } catch(IOException e) {
            e.printStackTrace();
        }
    }

    private List<String> generateSetupTcl() {
        if(!templates.containsKey("setup")) {
            logger.error("Setup template code not found");
            return null;
        }
        List<String> newlines = new ArrayList<>();
        for(String line : templates.get("setup")) {
            line = line.replace("#*orig*#", turnid + "_" + name + in_v_file);
            line = line.replace("#*dc_log*#", turnid + "_" + name + dc_log_file);
            line = line.replace("#*root*#", root);
            line = line.replace("#*root_sdf*#", turnid + "_" + name + in_sdf_file);
            line = line.replace("#*search_path*#", tech.getSynctool().getSearchPaths());
            line = line.replace("#*libraries*#", tech.getSynctool().getLibraries());
            newlines.add(line);
        }
        return newlines;
    }

    private List<String> generateSplitTcl(String instname, String sdffilename) {
        if(!templates.containsKey("split")) {
            logger.error("Split template code not found");
            return null;
        }
        List<String> newlines = new ArrayList<>();
        for(String line : templates.get("split")) {
            line = line.replace("#*dc_log*#", turnid + "_" + name + dc_log_file);
            line = line.replace("#*inst_name*#", instname);
            line = line.replace("#*inst_sdf_file*#", sdffilename);
            newlines.add(line);
        }
        return newlines;
    }

    private List<String> generateFinalTcl() {
        if(!templates.containsKey("final")) {
            logger.error("Final template code not found");
            return null;
        }
        return templates.get("final");
    }

    public Set<String> getScriptFiles() {
        Set<String> retVal = new HashSet<>();
        retVal.add(localfolder + turnid + "_" + name + dc_sh_file);
        retVal.add(localfolder + turnid + "_" + name + dc_tcl_file);
        return retVal;
    }

    public String getExec() {
        return turnid + "_" + name + dc_sh_file;
    }

    public Set<String> getInFiles() {
        Set<String> retVal = new HashSet<>();
        retVal.add(localfolder + turnid + "_" + name + in_sdf_file);
        retVal.add(localfolder + turnid + "_" + name + in_v_file);
        return retVal;
    }
}
